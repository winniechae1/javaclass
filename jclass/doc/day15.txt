# day15

--------------------------------------------------------------------------------------------------------------
참고]
	상속 : 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것이다.
	상속을 통해서 클래스를 작성하면 적은 양의 코드로 클래스를 작성할 수 있고 코드를
	공통적으로 관리할 수 있기 때문에 코드의 추가 및 변경이 매우 용이하다.


--------------------------------------------------------------------------------------------------------------

final 속성
	'마지막의' 또는 '변경될 수 없는'의 의미를 갖고 있으며 모든 대상에 사용 될 수 있다.

예]
	변수에 사용되면 값을 변경할 수 없는 상수가 되며 메서드에 사용하면 오버라이딩을 할
	수 없게 되고 클래스에 사용되면 자신을 확장하는 자식클래스를 정의하지 못하게 된다.

참고]	
	final이 붙은 변수는 상수이므로 선언과 초기화를 동시에 한다.
	
	
---------------------------------------------------------------------------------------------------------------
Object 클래스
자바에서 만들어진 클래스의 최상위 super 클래스의 역할을 하는 클래스
따라서 자바로 만들어진 모든 클래스는 Object 제공하는 모든 기능 (멤버 : 변수, 함수)를 자동적으로 사용할 수 있다.

참고]
	이렇게 최상위 클래스를 만들어 놓은 이유는 ? 각각의 클래스의 족보를 정확하게 따질 수 있도록 하기 위해서.

참고]
	자바에서 만든 모든 클래스는 반드시 상위 클래스를 가지고 있다.
	우리가 이제까지 만든 클래스도 상위클래스를 가지고 있다. 만약 강제로 상위클래스를 지정하지 않으면 
	묵시적으로 Object라는 클래스를 상속받아서 만들어진다.
	
**
instanceof
특정클래스를 new 시키면 주소가 만들어지는데 이 주소가 어떤 클래스 소속의 주소인지를 
알아내는 연산자이다. 연산의 결과는 참, 거짓으로 나오게 된다.

형식]
	주소	instanceof	클래스이름
	
의미]
	주소가 가리키고 있는 곳의 내용이 지정한 클래스 소속인지를 물어보는 것

참고]
	소속이라는 개념은 is a 관계를 따져주는 것이다. 
	상속 관계를 따지는 개념이 소속이라는 것이다.	
	
-------------------------------------------------------------------------------------------------------------------

*****
다형성
하나의 변수를 이용해서 여러 형태의 클래스를 사용하도록 하는 기법

주소의 형변환(Casting)
원칙적으로 주소는 다른 형태로 형변환이 불가능하다.
즉, 주소는 Heap Type에 따라 주소가 결정이 되므로 Heap Type가 다르면 주소를 기억할 수 없다.

예]
	int[] a = new float[5];		-- X
	Test t = new Calc();		-- X
	
*****
딱 한가지 경우에 한해서 주소의 형변환이 가능하다.
상속관계에 있는 클래스끼리는 형변환이 가능하다.
WHY?
	is a 관계가 성립하기 때문에 
	
	자동 형변환
		하위 클래스의 주소(인스턴스)가 상위클래스의 변수에 기억되는 것은 자동적으로 형변환을 해준다.
	강제 형변환
		상위 클래스의 주소(인스턴스)가 하위클래스의 변수에 기억되는 것은 원칙적으로 불가능하며 다만 
		강제로 형변환을 해주면 가능하다.
		
예]
	class Father {}
	
	class Son extends Father {}
	
	Son s = new Son();
	Father f = s;		==> 자동 형변환
	
	Father f = new Father();
	Son s = f;			==> X
	
	Son s = (Son)f;		==> O 강제 형변환
	
다형성이란 
주소의 형변환 이론을 기반으로 상위클래스의 주소를 이용해서 하위클래스를 이용할 수 있으며 다시 말해서 
상위클래스의 주소를 이용하면 여러 하위클래스를 다룰 수 있다.

-----------------------------------------------------------------------------------------------------------
개발자 입장에서 다형성이란 
상위 클래스의 변수를 이용하면 하위 클래스(인스턴스)를 사용할 수 있다. (기억시킬 수 있다.)
라는 것이 되므로 상위 클래스의 변수를 이용해서 하위 클래스를 받아서 사용하면 된다.
-----------------------------------------------------------------------------------------------------------	
참고]
	다형성을 개발자 입장에서 사용하는 방법
	1.	어떤 함수가 상위클래스를 매개변수로 가지고 있으면 하위클래스를 입력해도 상관없다.
	
	예]	
		class Grand {}
		class Father extends Grand {}
		class Son extends Father {}
		
		함수정의]
		void abc(Grand g){
			처리내용
		}
		
		함수 호출]
			abc(new Grand());	<= O
			abc(new Father());	<= 자동형변환
			==> Grand g = new Father();
			
	따라서 만약 어떤 함수가 Object를 매개변수로 가지고 있으면 Object를 입력해주는 경우는 거의 없다.
	대신에 모든 클래스를 다 입력해도 된다. 라는 의미이다.
	
	2.	어떤 함수가 상위 클래스를 반환값으로 가지고 있으면 반드시 원하는 하위 클래스 형태로 형변환해서 
		사용해야 한다.
		
------------------------------------------------------------------------------------------------------------------
추상 클래스
추상함수를 0개 이상 가직고 있는 클래스 
즉, 추상 함수가 한개도 없어도 강제로 추상클래스를 만들 수 있고 추상함수가 한개라도 있으면 
반드시 추상클래스로 만들어야 한다.

추상함수란?
함수의 몸체(블럭, {})가 없는 함수를 말한다.

참고]
	함수 정의 형식]
		[접근지정자]	[속성]	반환값타입	함수이름(매개변수리스트){
			함수처리내용..
		}
몸체가 없는 것은 기능이 없는 함수를 이야기한다.
==> 참고로 함수는 C언어에서는 가상 함수에 해당하는 것이다.

형식]
	[접근지정자]	abstract	반환값타입	함수이름(매개변수리스트);
예]
	public abstract void abc(int a);
	
--------------------------------------------------------------------------------------------------------------------
추상클래스 만드는 방법
형식]
	[접근지정자]	abstract	class	클래스이름{
		변수
		일반함수
		추상함수 
	}

추상클래스를 만드는 이유 
: 다형성 구현을 하기 위해서이다.

*****
추상클래스를 사용하는 방법
추상클래스는 스스로 new 시킬수 없다. 그 안에는 기능이 없는 함수가 존재할 수 있기 때문이다.

1.	다른 클래스에 상속을 시켜준 후 그 클래스를 new 시키고 추상클래스 타입의 변수로 받아서 사용한다.
==>	실무에서 이렇게 사용하는 경우는 10%미만이다.

참고]
	추상클래스를 상속받은 클래스는 추상함수를 100 % 오버라이딩 해야한다.

2.	실무에서는 추상클래스 안에 반환값이 자기자신이면서 속성이 static인 함수를 사용해서 
	객체를 반환받아서 사용하면 된다.
	
참고]
	추상클래스가 아님에도 생성자 함수가 존재하지 않는 클래스가 있다.
	이런 클래스는 생성자 함수가 없는 것이 아니고 생성자를 private으로 감춰놓은 것이므로
	역시 new 시켜서 사용할 수 없다. 이런 클래스 역시 속성이 static 이면서 반환값이 자기자신인 함수를 사용해서 
	처리해주면 된다.