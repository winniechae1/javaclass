# day01

자바의 특징 
	>> 객체지향 언어 
	
	객체지향언어란?
	>> 개발자가 필요한 기능을 대부분 미리 만들어놓고 
		이것을 관련된 것끼리 묶어서 개발자에게 제공하는 언어
		
		개발자 입장에서는 이 관련된 것 중 필요한 부분을 사용만 함으로써
		원하는 처리를 할 수 있도록 만든 언어 
		
	특징]
		Class만 바꾸면 기능을 다르게 할 수 있다. 
	
------------------------------------------------------

자바의 특징 

	1. 플랫폼에 독립적이다. 
	2. 자동 메모리 관리를 한다. 
		>> 가비지 컬렉터가 자동 실행된다. 
	
	3. 네트워크와 분산 처리를 지원한다. 
		>> 자바 뿐만 아니라 요즘 나오는 모든 시스템이 동일하게 제공하는 기능 .. 
		
		필요한 기능(부품)은 네트워크를 통해서 직접 얻어올 수 있다. 
	
	4. 멀티 스레드 기능을 제공한다. 
		>> 두가지 이상의 프로그램을 동시에 실행할 수 있다.
			두가지 이상의 프로그램을 만든 후 그 결과를 순서대로 보지 않고 
			한꺼번에 같이 볼 수 있다. 
	
	5. 동적 로딩이 가능하다. 
		>> 여러개의 프로그램을 만들어서 이들이 서로 연관되어서 실행될 때 
			한 부분을 변경하면 변경한 부분만 재컴파일해서 사용할 수 있다. 

따라서 자바를 이용해서 뭔가를 만들고 싶다면 
	컴파일러가 필요하고 
	연계편집을 하기 위한 도구가 필요하다.
	(이것을 JVM 라고 부른다.)
	이 두가지를 제공하는 도구를 다운받아서 사용해야 한다. 
	>> JDK가 바로 이들 도구를 제공하고 있다. 
		물론, 이 안에는 2가지 기능 말고도 필요한 각종 도구들이 
		패키지로 묶여서 제공되고 있다. 
		
------------------------------------------------------------
자바로 만든 프로그램을 실행하는 원리 
	1. 자바언어의 문법에 입각하여 자연어로 프로그램을 제작한다. 
		
		이 프로그램은 저장이 되어야 하는데 
		이때 규칙
		
			1) 저장할 파일의 이름은 class의 이름과 반드시 동일해야 한다.
			2) 확장자는 반드시 .java여야 한다. 
			
		예]
			public class Test01 {
				.....
			}
			>>Test01.java 라는 이름으로 파일을 만들어야 한다. 반드시 .. 
	
	2. 만들어진 소스 파일을 컴파일 해야 한다.
		그래야 컴퓨터가 이해할 수 있는 기계어로 만들어줄 수 있으니까..
		
		컴파일 방법 
			
			javac 파일이름.java
			
				javac : 자바컴파일러 프로그램 
				
			예]
				javac Test01.java
				
			경우에 따라서 여기에 옵션이 붙기도 한다. 
			
		컴파일 단계를 거치면 확장자가 .class인 파일이 만들어진다. 
		이 파일을 자바바이트코드라 이야기 한다. 
		>> Test01.class
	
	3. 만들어진 class 파일은 배포가 된다. 
		>> 다른 사람에게 실행하도록 줄 수 있다. 
		
		실행하는 방법]
			
			java 클래스이름 
		
		예]	
			java Test01   
			
-------------------------------------------------------------
참고]
	
	API
	>> 운영체제와 프로그램 사이에 원할한 작동을 위해서 양쪽을 연결해주는 도구 
	
	라이브러리 
	>> API가 사용하는 도구의 필용한 정보를 기억한 프로그램의 일종
	
	결론]
		API 안에는 라이브러리가 반드시 포함되어야 한다. 
		
-------------------------------------------------------------

자바 프로그램의 구조 

	자바 프로그램은 반드시 모든 내용이 하나의 class 안에 포함되어야 한다. 
	
	1) class를 만드는 방법 
		
		형식]
			
			[접근지정자] [속성] class 클래스이름 {
				필요한 코딩 ...
			}
		
		예]
			public class Test02{
				
			}
			
			>> Test02 클래스 
		
		참고]
			사용자 정의어 만들기 
				자바에서 프로그램을 만들다보면 
				개발자가 이름을 붙여야 하는 경우가 발생한다. 
				이처럼 개발자가 이름을 붙이는 것을 "사용자정의어(식별자)"라고 부른다.
				
			예]
				클래스이름, 변수이름, 함수이름,...
			
			규칙]
				1. 첫글자는 반드시 문자가 와야 한다.
					>> 숫자가 오면 안된다.
				
				2. 두번째 글자부터는 문자와 숫자를 혼용해서 사용할 수 있다. 
				
				3. 특수문자는 _ 나 $ 만 사용할 수 있다. 
				
				4. 글자 수는 256글자 이내로 한다. 
			
			예]
				hong_1		O
				1hong		X
			
		식별자 표기법]
			
			1. 카멜 표기법 
				>> 식별자가 두단어 이상으로 만들어지는 경우 
					두번째 단어 이후부터 첫글자는 대문자를 사용해서 표기한다. 
				
				예]
					test study 
					>> testStudy
			2. 스네이크 표기법 
				>> 식별자가 두단어 이상으로 만들어지는 경우 
					각 단어를 연결하는 문자로 _를 사용해서 표기하는 방법 
				
				예]
					test study 
					>> test_study    
			
------------------------------------------------------------------
참고]
	식별자를 만들때는 자바에서 이미 사용하고 있는 예약어는 사용할 수 없다. 
	
참고]
	자바에서는 식별자의 대소문자를 엄격하게 구분해서 처리한다. 
	
참고]
	암묵적으로 클래스이름은 대문자로 시작한다. 
	함수와 변수는  소문자로 시작한다.
	
------------------------------------------------------------------

파일이름을 지정하는 방법 
	
	1) 하나의 파일에는 하나의 class만 만드는 것이 원칙이다. 
		따라서 파일의 이름은 class 이름과 동일하게 만들어야 한다.
	
	2) 어쩔수 없이 하나의 파일에 두개 이상의 클래스를 만들게 되는 경우 
		
		a) 접근지정자가 public 인 클래스의 이름을 파일이름으로 사용해야 한다. 
			>> public 접근지정자는 하나의 파일안에 없거나 한개만 붙여줄 수 있다. 
		
		b) 만약 public 클래스가 없으면 
			1) main() 함수가 있는 클래스이름을 파일 이름으로 사용한다. 
			2) main() 함수가 없거나 여러클래스에  main() 함수가 존재한다면 
				메인함수가 있는 아무 클래스나 파일이름으로 사용할 수 있다.
	
	참고]
		클래스가 실행되기 위해서는 JVM에 의해서 실행되는 함수가 있어야 한다. 
		그런데 이때 JVM은 아무 함수나 실행하는데 사용하지 않고 오직 
		public static void main(String[] args){} 
		를 가진 함수만을 사용한다. 
		따라서 만약 어떤 클래스를 만들고 그 클래스가 실행되기 위해서는 반드시 
		public  static void main(String[] args){} 함수가 
		존재해야만 한다.
		
		>> 이처럼 어떤 프로그램을 시작하는 함수를 "진입점 함수"라고 부른다.
		
	참고]
		class 안에는 필요한 함수나 필요한 변수를 포함시킬 수 있다. 
		
		결론적으로 
		
		public class Test {
			int num;
			float area; // 변수도 포함 할 수 있다. 
			public void abc() {
			
			}	// 함수도 올 수 있다. 
			
			public static void main(String[] args){
				// 진입점 함수 ... 
			}
		}
	
	참고]
		클래스에 붙는 접근지정자는 
			***
			public 또는 생략 
			만 올 수 있다. 
		
-----------------------------------------------------------
상수와 변수 
	
	1. 상수 
		>> 개발자가 프로그램에게 알려주는 데이터(정보)
		
		예]
			System.out.println("Hello");
			
			이 경우 
				Hello 
			는 상수(리터럴)이다. 
			
		문제는 상수는 "리터럴 풀"이라는 메모리 공간에 일단 기억한 후 
		사용하도록 되어있다. 
		
		종류]
			1) 정수형 
				>> 일반적인 소수점이 없는 숫자 
				
					10 		10진수 방식
					012		8진수 방식
					0x000a	16진수 방식
			2) 실수형
				소수점이 존재하는 숫자 
				3.14 		일반적인 소수 방식
				3.0e5		지수방식
							3.0 * 10의 5승을 의미한다. 
				0.25e-7 	0.25 * 10의 -7이라는 의미 
				
			3) 논리형
				참과 거짓을 의미하는 데이터 
				true 
				false 
				>> 위의 2가지 이외에는 절대로 논리형을 표현할 수 없다. 
			4) 문자형
				>> 오직 한 글자로만 구성된 문자를 의미 
					내부적으로 입력한 문자를 UNI code 방식으로 변화하여 기억하게 한다. 
					
					'a'	>> 97이라는 아스키 코드값을 기억 
					'\u0000' >> 실제 유니코드값으로 문자를 기억할 수 있다.
			5) 문자열형 
				한글자 이상으로 구성된 문자를 의미한다. 
				
				엄격히 이야기하면 이것은 기본 상수는 아니다.
				개발자 입장에서 매우 빈번하게 사용하는 형태이므로 
				포함시켜서 설명한다. 
				
				예]
					"이것은 문자열"
	참고]
		상수는 이미 정의되어있는 값이나 만들 때 값이 정해져 
		있는 것이기 때문에 변경이 불가능하다.
				
	2. 변수 
		
		리터럴 풀의 특징]
			
			1. 데이터가 기억될 때 형태가 정해진다. 
			2. 같은 데이터가 입력되면 중복해서 기억하지 않는다. 
		
		참고]
			변수의 필요성 
				개발자가 입력한 데이터는 일단 리터럴 풀에 저장된다.
				그리고 프로그램이 그 리터럴 풀에 있는 데이터를 꺼내서 사용하게 된다.
				(정확히는 주소만 사용하게 된다.)
				
				리터럴 풀은 주소를 모르면 사용할 수 없다. 
				
				변수는 리터럴 풀에 기억된 데이터를 개발자가 사용할 수 있도록  
				기억시켜 놓는 것이다. 
				이때 변수를 만드는 영역이 stack 영역이다.

참고 ]
      Stack 영역의 특징
         1. 메모리에 별칭을 붙여서 사용할 수 있는 영역이다.
            ( 별칭은 개발자가 붙이는 것이므로
               개발자가 가장 손쉽게 이용할 수 있는 영역이다.)
         
         2. 8개의 영역중에서 리터럴 폴 다음으로 가장 작은 영역을 
            운영체제에게 배정 받는다.
            
   변수 만드는 형식 ]
      // 변수를 만들때는 반드시 변수의 형태와 크기를 지정해야 한다.
      
      데이터타입 변수이름;
         
      예 ]
         String str; // 변수 선언
         
      참고 ]
         변수이름은 Stack 에 할당받은 메모리 공간에 붙이는 별칭이다.
         따라서 이 변수 이름만 기억하고 있으면 언제든지
         이 메모리 공간을 사용할 수 있게 된다.
         
   2. 대입연산자를 이용해서 필요한 데이터를 기억한다. (변수 초기화)
   
      형식 ]
         변수이름 = 데이터;
         
	  예]
	  	str = "abcd";
	
	참고]
		1 + 2 를 한꺼번에 처리할 수도 있다.
		
		String str = "abcd";
		//변수 선언과 초기화를 동시에 한 경우에 해당..
		
  --------------------------------------------------
 *****
  자바의 기본 데이터타입
  	
  	1. 논리형
  		boolean		1byte : true 또는 false 만 기억 
  	
  	2. 문자형 
  		char		2byte 
  	3. 정수형
  		byte		1byte : -128 ~ 127
  		short		2byte
  		int			4byte
  		long		8byte
  		
  	4. 실수형
  		float		4byte
  		double		8byte
  		
  	따라서 변수를 만들때 데이터의 타입을 기술하면 
  	데이터의 형태와 크기까지 모두 결정이 된 상태이다. 

	예]
		나는 정수를 기억할 메모리를 할당받고 싶다.
		
		byte num; -- 변수선언
		
		---------------------------------------------------------------

참고]
	자바에서의 주석처리 
	
	1. //	
	>> 한줄 주석
	
	2. /*  */
	>> 여러줄을 주석으로 처리 
	
	3. /**
	
		*/
		>> api 문서에 포함되는 html 내용을 기술하는 주석 ... 
		
--------------------------------------------------------------------------------
메모장에서 

	 ../java/test 폴더에서 클래스를 만들어서 실행하세요.
	
	1. 가로가 10이고 세로가 5인 사각형의 가로 세로길이를 출력하는 프로그램을 제작하세요.
	
	2. 반지름이 7인 원의 둘레와 넓이를 출력하는 프로그램을 제작하세요. 
	
	3. 밑변이 3이고 높이가 5인 삼각형의 넓이를 출력하는 프로그램을 제작하세요. 
	
	주의]
		1. 클래스 만드는 형식
		2. 클래스 이름 만드는 형식 
		3. 메인함수 추가 
		4. 메인함수 내에 변수를 만들고 데이터를 초기화해주고 
		5. 출력한다. 

------------------------------------------------------------------------

cmd 창에 출력하는 방법 
	
	1. System.out.println()
		>> 출력한 후 자동으로 줄 바꿈이 일어난다.
		
	2. System.out.print()
		>> 출력한 후 줄바꿈이 일어나지 않는다. 
	
	참고]
		1,2 공통적인 특징 
			
			한번에 한개의 데이터만 출력할 수 있다. 
			
			예]
				System.out.println("홍", "길동");  ---- X
	3. System.out.printf()
		>> 여러 데이터를 동시에 출력할 수 있다. 
			+
			데이터의 출력 형태를 지정할 수 있다.
		
		참고]
			이 함수는 C 언어의 printf() 의 것을 그대로 모방한 함수이다.
		
		형식]
			System.out.printf("형식을 만드는 문자", 데이터1, 데이터2, 데이터3, ...  );
			
		형식을 만드는 문자]
		
			%d		정수값을 10진수로 출력
			%o		정수값을 8진수로 출력
			%x		정수값을 16진수로 출력
			%f		실수값을 출력(소수 방식)
			%e		실수값을 출력(지수 방식)
			%c		문자를 출력
			%s 		문자열을 출력
			